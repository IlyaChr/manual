github
IlyaChr
Zerguard962111$

tutorial по git 
https://git-scm.com/book/ru/v1/

Первоначальная настройка Git
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

Проверка настроек
git config --list

Как получить помощь?
$ git help config
---------------------------------------------------------------------------
Основы Git

Создание репозитория в существующем каталоге
$ git init

индексация файлов
$ git add *.c
$ git commit -m 'initial project version'


Клонирование существующего репозитория
$ git clone git://github.com/schacon/grit.git
$ git clone git://github.com/schacon/grit.git mygrit
или http(s):// или user@server:/path.git

---------------------------------------------------------------------------
.2 Основы Git - Запись изменений в репозиторий

Определение состояния файлов
$ git status

Отслеживание новых файлов
$ git add README


Игнорирование файлов
Зачастую, у вас имеется группа файлов, которые вы не только не хотите автоматически добавлять в репозиторий, 
но и видеть в списках неотслеживаемых. К таким файлам обычно относятся автоматически генерируемые файлы 
(различные логи, результаты сборки программ и т.п.). В таком случае, 
вы можете создать файл .gitignore с перечислением шаблонов соответствующих таким файлам. 
Вот пример файла .gitignore:
$ cat .gitignore
*.[oa]
*~

# комментарий — эта строка игнорируется
# не обрабатывать файлы, имя которых заканчивается на .a
*.a
# НО отслеживать файл lib.a, несмотря на то, что мы игнорируем все .a файлы с помощью предыдущего правила
!lib.a
# игнорировать только файл TODO находящийся в корневом каталоге, не относится к файлам вида subdir/TODO
/TODO
# игнорировать все файлы в каталоге build/
build/
# игнорировать doc/notes.txt, но не doc/server/arch.txt
doc/*.txt
# игнорировать все .txt файлы в каталоге doc/
doc/**/*.txt

Просмотр индексированных и неиндексированных изменений
git diff

Если вы хотите посмотреть, что вы проиндексировали и что 
войдёт в следующий коммит, вы можете выполнить git diff --cached

вы также можете использовать git diff --staged, которая легче запоминается.) 
Эта команда сравнивает ваши индексированные изменения с последним коммитом:


Фиксация изменений
c git commit
$ git commit Для ещё более подробного напоминания, что же именно вы поменяли, можете передать аргумент -v
$ git commit -m "Story 182: Fix benchmarks for speed"
[master]: created 463dc4f: "Fix benchmarks for speed"
 2 files changed, 3 insertions(+), 0 deletions(-)
 create mode 100644 README

Добавление параметра -a в команду git commit заставляет Git автоматически индексировать
 каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без git add:



Удаление файлов
$ git rm 

удалить файл из индекса, оставив его при этом в рабочем каталоге
$ git rm --cached readme.txt

Если вам хочется переименовать файл в Git'е, вы можете сделать что-то вроде:
$ git mv file_from file_to

---------------------------------------------------------------------------
.3 Основы Git - Просмотр истории коммитов

Просмотр истории коммитов
git log
$ git log -p
$ git log -p -2

 Чтобы получить дельту по словам вместо обычной дельты по строкам, 
нужно дописать после команды git log -p опцию --word-diff

$ git log --stat

---------------------------------------------------------------------------
.4 Основы Git - Отмена изменений

Изменение последнего коммита
$ git commit --amend


$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
Все три команды вместе дают один коммит — второй коммит заменяет результат первого.


Отмена индексации файла
git reset HEAD <файл>...

Отмена изменений файла
$ git checkout -- index.txt

---------------------------------------------------------------------------
.5 Основы Git - Работа с удалёнными репозиториями
Отображение удалённых репозиториев
git remote

с URL 

Добавление удалённых репозиториев
remote add library https://github.com/IlyaChr/Library.git
$ git remote -v


Fetch и Pull
для получения данных из удалённых проектов, следует выполнить:
$ git fetch [имя удал. сервера]


$git clone автоматически настраивает вашу локальную ветку master 
на отслеживание удалённой ветки master на сервере, с которого вы клонировали

Выполнение git pull, как правило, извлекает (fetch) данные с сервера, 
с которого вы изначально склонировали, и автоматически
пытается слить (merge) их с кодом, над которым вы в данный момент работаете.

$git pull origin master --allow-unrelated-histories

Push
Когда вы хотите поделиться своими наработками, 
вам необходимо отправить (push) их в главный репозиторий
git push [удал. сервер] [ветка]


переименование удалённых репозиториев
$ git remote rename pb paul


Удаление удалённых репозиториев
$ git remote rm paul

Инспекция удалённого репозитория
git remote show [удал. сервер]


---------------------------------------------------------------------------
.6 Основы Git - Работа с метками
Просмотр меток
git tag

Аннотированные метки
$ git tag -a v1.4 -m 'my version 1.4'

Подписанные метки
$ git tag -s v1.5 -m 'my signed 1.5 tag'

Верификация меток
git tag -v [имя метки]

Выставление меток позже
$ git tag -a v1.2 -m 'version 1.2' 9fceb02

Обмен метками
git push origin [имя метки].
$ git push origin --tags

---------------------------------------------------------------------------
1 Ветвление в Git - Что такое ветка?

создание ветки 
$ git branch testing

Ветка в Git'е — это просто легковесный подвижный указатель 
указывающая на последний сделанный коммит по умолчанию ветка master


указатель HEAD указывает на текущую ветку


переход на другую ветку 
$ git checkout testing

создание и переход на ветку testing
$ git checkout -b testing


Основы ветвления и слияния

сливание веток 
$ git checkout master
$ git merge hotfix


удаление ветки 
$ git branch -d hotfix

